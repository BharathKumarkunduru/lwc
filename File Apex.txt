 public with sharing class ContactWithImageController2 {
 @AuraEnabled(cacheable=true)
    public static List<ContactWithImageData> getContacts(string searchval01, string searchval02 , string searchval03) {
        system.debug('the location was '+searchval03);
        System.debug('the second value ' + searchval02);
        List<ContactWithImageData> contactsWithImageData = new List<ContactWithImageData>();
        system.debug('the input value is ' + searchval01);
        
        string query = 'Select Id, FirstName, LastName, MailingPostalCode,Account.Name,AccountId, Years_of_experience__c, Specialty__c, Email, Location__c, (SELECT Id, ContentDocument.LatestPublishedVersionId FROM ContentDocumentLinks) FROM Contact';
        
        // Get the ID of the Doctor record type
        Id doctorRecordTypeId = Schema.SObjectType.Contact.getRecordTypeInfosByName().get('Doctors').getRecordTypeId();
        
        // Filter the query by the Doctor record type
        query += ' WHERE RecordTypeId = \'' + doctorRecordTypeId + '\'';
        
        // Add search criteria to the query
        if (String.isNotBlank(searchval01)) {
            query += ' AND Name LIKE \'%' + searchval01 + '%\'';
        }
        if (String.isNotBlank(searchval02)) {
            query += ' AND Specialty__c = \'' + searchval02 + '\'';
        } 
        if(String.isBlank(searchval02) && String.isNotBlank(searchval03)){
            query += ' AND Location__c = \'' + searchval03 + '\'';
        }
        if(String.isNotBlank(searchval02) && String.isNotBlank(searchval03)){
            query += 'AND Specialty__c = \'' + searchval02 + '\' AND Location__c = \''+ searchval03 + '\'';
        }
        
        list<Contact> contacts = Database.query(query);
        
        System.debug('the contacts are ' + contacts);
        
        for (Contact contact : contacts) {
            if (contact.ContentDocumentLinks.size() > 0) {
                ContentDocumentLink cdl = contact.ContentDocumentLinks[0];
                ContentVersion cv = [SELECT VersionData, FileType FROM ContentVersion WHERE ContentDocumentId = :cdl.ContentDocumentId];
                contactsWithImageData.add(new ContactWithImageData(contact, cv));
            } else {
                contactsWithImageData.add(new ContactWithImageData(contact, null));
            }
        }
        
        return contactsWithImageData;
    }
    
    public class ContactWithImageData {
        @AuraEnabled public String Id;
        @AuraEnabled public String FirstName;
        @AuraEnabled public string Postalcode ;
        @AuraEnabled public String LastName;
        @AuraEnabled public Decimal Yearsofexp;
        @AuraEnabled public String AccountName ; 
        @AuraEnabled public String Email;
        @AuraEnabled public String imageData;
        @AuraEnabled public String imageFileType;
        @AuraEnabled public string Location;
        @AuraEnabled public string Specialty;
        @AuraEnabled public string AccountId;
        
        public ContactWithImageData(Contact contact, ContentVersion cv) {
            Id = contact.Id;
            AccountName = contact.Account.Name;
            FirstName = contact.FirstName;
            Postalcode = contact.MailingPostalCode;
            LastName = contact.LastName;
            Yearsofexp = contact.Years_of_experience__c;
            Email = contact.Email;
            Location = contact.Location__c;
           Specialty = contact.Specialty__c;
            AccountId=contact.AccountId;
            if (cv != null) {
                imageData = EncodingUtil.base64Encode(cv.VersionData);
                imageFileType = cv.FileType;
            }
        }
    }
	}
	
	
============================================================================================


//Create Document
ContentVersion cv = new ContentVersion();
cv.Title = 'Test Document';
cv.PathOnClient = 'TestDocument.pdf';
cv.VersionData = Blob.valueOf('Test Content');
cv.IsMajorVersion = true;
Insert cv;
 
//Get Content Documents
Id conDocId = [SELECT ContentDocumentId FROM ContentVersion WHERE Id =:cv.Id].ContentDocumentId;
 
//Create ContentDocumentLink 
ContentDocumentLink cdl = New ContentDocumentLink();
cdl.LinkedEntityId = acc.Id;
cdl.ContentDocumentId = conDocId;
cdl.shareType = 'V';
Insert cdl;

====================================================================================================================
no  error 25%
@isTest
private class ContactWithImageController2Test {

     @testSetup
    static void setupTestData() {
        // Create test data for the Contact object with RecordType.Name = 'Patients'
        List<Contact> contacts = new List<Contact>();
        for (Integer i = 0; i < 10; i++) {
            contacts.add(new Contact(
                LastName = 'TestContact' + i,
                Appointment_Date__c = System.today().addDays(i),
                Status__c = 'Scheduled',
                RecordType = new RecordType(Name = 'Patients')
            ));
        }
        insert contacts;
    }
    @isTest
    static void testTrackingApp() {
        // Test data setup
        List<Contact> testContacts = new List<Contact>();
        for (Integer i = 0; i < 5; i++) {
            Contact c = new Contact(
                Email = 'test' + i + '@example.com',
                //Name = 'Test Contact ' + i,
                FirstName = 'Test',
                LastName = 'Contact ' + i,
                Appointment_Date__c = Date.today(),
                SlotsAvailable__c = '10:00 - 10:30',
                Status__c = 'Scheduled',
                RecordType = new RecordType(Name = 'Patients')
            );
            testContacts.add(c);
        }
        insert testContacts;

        Test.startTest();

        // Test the trackingApp method
        List<Contact> resultContacts = ContactWithImageController2.trackingApp('test@example.com');

        Test.stopTest();
	}
     @isTest
    static void testCancelAppointment() {
        // Retrieve the first contact created during test setup
        List<Contact> contacts = [SELECT Id, Email,Appointment_Date__c, Status__c, CancelledSlot__c, SlotsAvailable__c FROM Contact WHERE RecordType.Name = 'Patients' LIMIT 1];
        System.assertEquals(1, contacts.size());

        // Call the method under test
        List<Contact> updatedContacts = ContactWithImageController2.cancelAppointment(contacts[0].Id, contacts[0].Email);

    }
    
    @isTest
    static void testGetContacts() {
        // Create test data for Contact and ContentVersion
        Account testAccount = new Account(Name = 'Test Account');
        insert testAccount;

        Contact testContact = new Contact(
            FirstName = 'John',
            LastName = 'Doe',
            MailingPostalCode = '12345',
            AccountId = testAccount.Id,
            Years_of_experience__c = 5,
            Specialty__c = 'ENT',
            Email = 'test@example.com',
            Location__c = 'Pune',
            RecordTypeId = '0122t000000br7aAAA'
        );
        insert testContact;
        
       ContentVersion contentVersion_1 = new ContentVersion(
            Title='Header_Picture1', 
            PathOnClient ='/Header_Picture1.jpg',
            VersionData = Blob.valueOf('Test image data'), 
            origin = 'H'
        );
        insert contentVersion_1;
       
        ContentVersion contentVersion_2 = [SELECT Id, Title, ContentDocumentId FROM ContentVersion WHERE Id = :contentVersion_1.Id LIMIT 1];
        List<ContentDocument> documents = [SELECT Id, Title, LatestPublishedVersionId FROM ContentDocument];
        
        ContentDocumentLink contentlink = new ContentDocumentLink();
        contentlink.LinkedEntityId = testContact.id;
        contentlink.contentdocumentid = contentVersion_2.contentdocumentid;
        contentlink.ShareType = 'V';
        insert contentlink; 
        
      
        
    
    }
}
